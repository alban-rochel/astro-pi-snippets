import glob
import json
import csv
import numpy as np
import matplotlib
import matplotlib.patches
import matplotlib.pyplot as plt
#from mpl_toolkits.basemap import Basemap

fileList = glob.glob('*info.json')

out = open("res.csv", "w")
writer = csv.writer(out)

plot_data_mean = []
plot_data_stdev = []
plot_data_shape = []
plot_data_color = []
    
for file in fileList:
    f = open(file)
    
    data = json.load(f)
    
    try:
        climate = data["climate"]
        climate_zone = climate["code"]
    
        ndvi = data["ndvi"]
        mean = ndvi["mean"]
        stdev = ndvi["stdev"]
        
        if climate_zone == 51: #"Tropical rainforest"
            plot_data_mean.append(mean)
            plot_data_stdev.append(stdev)
            plot_data_shape.append("o")
            #plot_data_color.append("#0E6655")
            plot_data_color.append("#00FF80")
        elif climate_zone == 52: #"Tropical monsoon"
            plot_data_mean.append(mean)
            plot_data_stdev.append(stdev)
            plot_data_shape.append("o")
            #plot_data_color.append("#139341")
            plot_data_color.append("#00FF80")
        elif climate_zone == 53: # Tropical
            plot_data_mean.append(mean)
            plot_data_stdev.append(stdev)
            plot_data_shape.append("o")
            #plot_data_color.append("#4BDE80")
            plot_data_color.append("#00FF80")
        elif climate_zone == 101: #"Desert"
            plot_data_mean.append(mean)
            plot_data_stdev.append(stdev)
            plot_data_shape.append("o")
            #plot_data_color.append("#DCB824")
            plot_data_color.append("#FF8080")
        elif climate_zone == 102: # Semi-arid
            plot_data_mean.append(mean)
            plot_data_stdev.append(stdev)
            plot_data_shape.append("o")
            #plot_data_color.append("#E2DE51")
            plot_data_color.append("#FF8080")
        elif climate_zone == 151: #"Humid subtropical"
            plot_data_mean.append(mean)
            plot_data_stdev.append(stdev)
            plot_data_shape.append("o")
            #plot_data_color.append("#33E3FF")
            plot_data_color.append("#8080A0")
        elif climate_zone == 152: #"Oceanic"
            plot_data_mean.append(mean)
            plot_data_stdev.append(stdev)
            plot_data_shape.append("o")
            #plot_data_color.append("#5EB9C8")
            plot_data_color.append("#8080FF")
        elif climate_zone == 153: #"Mediterranean"
            plot_data_mean.append(mean)
            plot_data_stdev.append(stdev)
            plot_data_shape.append("o")
            #plot_data_color.append("#2E8694")
            plot_data_color.append("#8080FF")
        elif climate_zone == 201: #"Humid continental"
            plot_data_mean.append(mean)
            plot_data_stdev.append(stdev)
            plot_data_shape.append("o")
            #plot_data_color.append("#947171")
            plot_data_color.append("#808080")
        elif climate_zone == 202: #"Subarctic"
            plot_data_mean.append(mean)
            plot_data_stdev.append(stdev)
            plot_data_shape.append("o")
            #plot_data_color.append("#D3ADAD")
            plot_data_color.append("#808080")
    
        row = [file, climate_zone, mean, stdev]
    
        writer.writerow(row)
    except BaseException as err:
        print(err)
        
plt.xscale('log')
plt.yscale('log')
plt.title("NDVI mean vs std dev per measurement")
plt.gca().set_xlabel("NDVI mean")
plt.gca().set_ylabel("NDVI std dev")
plt.scatter(plot_data_mean, plot_data_stdev, marker=".", c=plot_data_color)
tropicalPatch = matplotlib.patches.Rectangle((0, 0), 0, 0, color = "#00FF80")
dryPatch = matplotlib.patches.Rectangle((0, 0), 0, 0, color = '#FF8080')
temperatePatch = matplotlib.patches.Rectangle((0, 0), 0, 0, color = '#8080FF')
continentalPatch = matplotlib.patches.Rectangle((0, 0), 0, 0, color = '#808080')
plt.legend([tropicalPatch, dryPatch, temperatePatch, continentalPatch], ['Tropical', 'Dry', 'Temperate', 'Continental'], markerscale = 100, frameon = False, fontsize = 10)
plt.show()

s